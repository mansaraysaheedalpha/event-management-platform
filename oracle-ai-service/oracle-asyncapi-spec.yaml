asyncapi: 2.5.0
info:
  title: Oracle Microservice - Real-Time Events
  version: 1.0.0
  description: |
    Handles all asynchronous, event-driven communication for the Oracle AI microservice.
    - **Subscribes** to real-time data streams from other services.
    - **Publishes** AI-powered predictions and insights back to the platform.
  contact:
    name: Oracle API Support
    email: oracle-support@eventplatform.com
        
servers:
  production:
    url: kafka.eventplatform.com:9092
    protocol: kafka
    description: Production Kafka Broker
  staging:
    url: staging-kafka.eventplatform.com:9092
    protocol: kafka
    description: Staging Kafka Broker

defaultContentType: application/json

channels:
  # ===============================================
  # == CHANNELS ORACLE SUBSCRIBES TO (INPUTS)
  # ===============================================

  platform.events.chat.message.v1:
    subscribe:
      summary: Receives live chat messages for sentiment analysis.
      operationId: receiveChatMessage
      message:
        $ref: '#/components/messages/ChatMessage'

  real-time.user.interactions:
    subscribe:
      summary: Receives user interaction events for engagement scoring.
      operationId: receiveUserInteraction
      message:
        $ref: '#/components/messages/UserInteraction'

  real-time.attendance.data:
    subscribe:
      summary: Receives updates on session attendance for capacity predictions.
      operationId: receiveAttendanceData
      message:
        $ref: '#/components/messages/AttendanceUpdate'

  real-time.session.feedback:
    subscribe:
      summary: Receives post-session feedback for success probability updates.
      operationId: receiveSessionFeedback
      message:
        $ref: '#/components/messages/SessionFeedback'

  real-time.network.connections:
    subscribe:
      summary: Receives data on new network connections to train matchmaking algorithms.
      operationId: receiveNetworkConnection
      message:
        $ref: '#/components/messages/NetworkConnection'

  # ===============================================
  # == CHANNELS ORACLE PUBLISHES TO (OUTPUTS)
  # ===============================================

  oracle.predictions.sentiment.v1:
    publish:
      summary: Publishes real-time sentiment analysis scores.
      operationId: publishSentimentScore
      message:
        $ref: '#/components/messages/SentimentScorePrediction'

  oracle.predictions.engagement-predictions:
    publish:
      summary: Publishes dynamic engagement scores and content recommendations.
      operationId: publishEngagementPrediction
      message:
        $ref: '#/components/messages/EngagementPrediction'

  oracle.predictions.capacity-forecasts:
    publish:
      summary: Publishes session capacity forecasts and proactive alerts.
      operationId: publishCapacityForecast
      message:
        $ref: '#/components/messages/CapacityForecastPrediction'

  oracle.predictions.networking-suggestions:
    publish:
      summary: Publishes live matchmaking and networking suggestions to users.
      operationId: publishNetworkingSuggestion
      message:
        $ref: '#/components/messages/NetworkingSuggestion'

  oracle.predictions.success-insights:
    publish:
      summary: Publishes high-level event success insights to organizer dashboards.
      operationId: publishSuccessInsight
      message:
        $ref: '#/components/messages/SuccessInsight'

components:
  messages:
    # --- Input Message Definitions ---
    ChatMessage:
      name: ChatMessage
      title: Live Chat Message
      summary: A single message sent in a session or general chat.
      payload:
        $ref: "#/components/schemas/ChatMessagePayload"
    UserInteraction:
      name: UserInteraction
      title: User Interaction Event
      summary: An event representing a user's action within the platform.
      payload:
        $ref: "#/components/schemas/UserInteractionPayload"
    AttendanceUpdate:
      name: AttendanceUpdate
      title: Session Attendance Update
      summary: An update on the number of attendees in a session.
      payload:
        $ref: "#/components/schemas/AttendanceUpdatePayload"
    SessionFeedback:
      name: SessionFeedback
      title: Session Feedback
      summary: Feedback submitted by a user for a session.
      payload:
        $ref: "#/components/schemas/SessionFeedbackPayload"
    NetworkConnection:
      name: NetworkConnection
      title: New Network Connection
      summary: Indicates that two users have successfully connected.
      payload:
        $ref: "#/components/schemas/NetworkConnectionPayload"

    # --- Output (Prediction) Message Definitions ---
    SentimentScorePrediction:
      name: SentimentScorePrediction
      title: Sentiment Score Prediction
      summary: The calculated sentiment for a piece of text.
      payload:
        $ref: "#/components/schemas/SentimentScorePredictionPayload"
    EngagementPrediction:
      name: EngagementPrediction
      title: Engagement Prediction
      summary: A prediction about a user's or session's engagement level.
      payload:
        $ref: "#/components/schemas/EngagementPredictionPayload"
    CapacityForecastPrediction:
      name: CapacityForecastPrediction
      title: Capacity Forecast Prediction
      summary: A forecast for session attendance and capacity.
      payload:
        $ref: "#/components/schemas/CapacityForecastPredictionPayload"
    NetworkingSuggestion:
      name: NetworkingSuggestion
      title: Networking Suggestion
      summary: An AI-powered suggestion for a user to connect with another attendee.
      payload:
        $ref: "#/components/schemas/NetworkingSuggestionPayload"
    SuccessInsight:
      name: SuccessInsight
      title: Event Success Insight
      summary: A real-time insight about the event's performance.
      payload:
        $ref: "#/components/schemas/SuccessInsightPayload"

  schemas:
    # --- Input Schema Definitions ---
    ChatMessagePayload:
      type: object
      properties:
        messageId: { type: string, format: uuid }
        eventId: { type: string, format: uuid }
        sessionId: { type: string, format: uuid, description: "Optional, for session-specific chats." }
        userId: { type: string, format: uuid }
        text: { type: string }
        timestamp: { type: string, format: date-time }
    UserInteractionPayload:
      type: object
      properties:
        interactionId: { type: string, format: uuid }
        eventId: { type: string, format: uuid }
        sessionId: { type: string, format: uuid }
        userId: { type: string, format: uuid }
        type: { type: string, enum: [click, view, poll_vote, question_upvote, document_download] }
        targetId: { type: string, description: "ID of the element interacted with." }
        timestamp: { type: string, format: date-time }
    AttendanceUpdatePayload:
      type: object
      properties:
        eventId: { type: string, format: uuid }
        sessionId: { type: string, format: uuid }
        currentAttendance: { type: integer }
        capacity: { type: integer }
        timestamp: { type: string, format: date-time }
    SessionFeedbackPayload:
      type: object
      properties:
        feedbackId: { type: string, format: uuid }
        eventId: { type: string, format: uuid }
        sessionId: { type: string, format: uuid }
        userId: { type: string, format: uuid }
        rating: { type: integer, minimum: 1, maximum: 5 }
        comment: { type: string }
        timestamp: { type: string, format: date-time }
    NetworkConnectionPayload:
      type: object
      properties:
        connectionId: { type: string, format: uuid }
        eventId: { type: string, format: uuid }
        user1: { $ref: "#/components/schemas/UserSummary" }
        user2: { $ref: "#/components/schemas/UserSummary" }
        timestamp: { type: string, format: date-time }

    # --- Output (Prediction) Schema Definitions ---
    SentimentScorePredictionPayload:
      type: object
      properties:
        sourceMessageId: { type: string, format: uuid }
        eventId: { type: string, format: uuid }
        sessionId: { type: string, format: uuid }
        sentiment: { type: string, enum: [positive, neutral, negative] }
        score: { type: number, format: float, minimum: -1, maximum: 1 }
        confidence: { type: number, format: float }
        timestamp: { type: string, format: date-time }
    EngagementPredictionPayload:
      type: object
      properties:
        eventId: { type: string, format: uuid }
        sessionId: { type: string, format: uuid }
        engagementScore: { type: number, format: float, minimum: 0, maximum: 100 }
        trend: { type: string, enum: [increasing, decreasing, stable] }
        timestamp: { type: string, format: date-time }
    CapacityForecastPredictionPayload:
      type: object
      properties:
        eventId: { type: string, format: uuid }
        sessionId: { type: string, format: uuid }
        forecastedAttendance: { type: integer }
        overflowProbability: { type: number, format: float }
        alertLevel: { type: string, enum: [green, yellow, red] }
        suggestion: { type: string, description: "e.g., 'Suggest overflow room' or 'Notify users of high demand'."}
        timestamp: { type: string, format: date-time }
    NetworkingSuggestionPayload:
      type: object
      properties:
        suggestionId: { type: string, format: uuid }
        eventId: { type: string, format: uuid }
        recipientUserId: { type: string, format: uuid }
        suggestedUser: { $ref: "#/components/schemas/UserSummary" }
        matchScore: { type: number, format: float }
        matchReasons: { type: array, items: { type: string } }
        suggestedIceBreaker: { type: string }
        timestamp: { type: string, format: date-time }
    SuccessInsightPayload:
      type: object
      properties:
        insightId: { type: string, format: uuid }
        eventId: { type: string, format: uuid }
        title: { type: string }
        description: { type: string }
        severity: { type: string, enum: [info, warning, critical] }
        data: { type: object, description: "Key data points supporting the insight" }
        timestamp: { type: string, format: date-time }

    # --- Reusable Helper Schemas ---
    UserSummary:
      type: object
      properties:
        userId: { type: string, format: uuid }
        fullName: { type: string }
        jobTitle: { type: string }
        company: { type: string }
        interests: { type: array, items: { type: string } }