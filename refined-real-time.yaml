asyncapi: 2.6.0
info:
  title: Real-Time Communication API (Global Event Platform)
  version: 2.0.0
  description: >
    The complete specification for the real-time microservice, handling all interactive features
    from live chat and Q&A to real-time analytics dashboards, security alerts, and monetization events.
    This service is designed for multi-tenancy, scalability, and a world-class user experience with
    comprehensive error handling, security, and operational monitoring.
  contact:
    name: Saheed Alpha Mansaray
    url: 'https://www.linkedin.com/in/saheed-mansaray'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'

servers:
  production:
    url: 'wss://realtime.your-platform.com/{region}'
    protocol: wss
    description: Production WebSocket server cluster with Redis scaling.
    security:
      - userToken: []
    variables:
      region:
        description: Server region for global deployment
        enum: ['us-east', 'us-west', 'eu-west', 'ap-southeast']
        default: 'us-east'
  development:
    url: 'ws://localhost:3002'
    protocol: ws
    description: Local development server.

defaultContentType: application/json

# ===================================================================
# CHANNELS - The heart of the API, defining all communication paths.
# ===================================================================

channels:
  # -------------------------------------------------------------------
  # Connection Lifecycle & System Management
  # -------------------------------------------------------------------

  /system/connection:
    description: System channel for connection lifecycle management.
    subscribe:
      summary: Receive connection lifecycle events.
      operationId: receiveConnectionEvent
      message:
        oneOf:
          - $ref: '#/components/messages/connectionAcknowledged'
          - $ref: '#/components/messages/heartbeat'
          - $ref: '#/components/messages/systemError'
          - $ref: '#/components/messages/reconnectRequired'

  /system/users/{userId}/sync:
    parameters:
      userId: { $ref: '#/components/parameters/userId' }
    description: User-specific sync channel for offline-first support.
    subscribe:
      summary: Receive sync events for offline content.
      operationId: receiveSyncEvent
      message: { $ref: '#/components/messages/syncUpdate' }

  # -------------------------------------------------------------------
  # Namespace: /comm (Live Communication Features)
  # -------------------------------------------------------------------

  /comm/sessions/{sessionId}/chat:
    parameters:
      sessionId: { $ref: '#/components/parameters/sessionId' }
    description: Channel for live attendee chat within a specific session with moderation.
    publish:
      summary: Send a chat message.
      operationId: sendChatMessage
      message: { $ref: '#/components/messages/sendChatMessage' }
    subscribe:
      summary: Receive new chat messages and moderation events.
      operationId: receiveChatMessage
      message:
        oneOf:
          - $ref: '#/components/messages/chatMessage'
          - $ref: '#/components/messages/chatMessageDeleted'
          - $ref: '#/components/messages/chatTranslated'

  /comm/sessions/{sessionId}/qa:
    parameters:
      sessionId: { $ref: '#/components/parameters/sessionId' }
    description: Channel for live Q&A, including questions, upvotes, and real-time updates.
    publish:
      summary: Ask a new question, upvote, or request the current state.
      operationId: interactWithQA
      message:
        oneOf:
          - $ref: '#/components/messages/askQuestion'
          - $ref: '#/components/messages/upvoteQuestion'
          - $ref: '#/components/messages/requestQaState'
    subscribe:
      summary: Receive new questions and updates to existing ones.
      operationId: receiveQAUpdate
      message:
        oneOf:
          - $ref: '#/components/messages/newQuestion'
          - $ref: '#/components/messages/questionUpdate'
          - $ref: '#/components/messages/questionRemoved'
          - $ref: '#/components/messages/currentQaState'

  /comm/sessions/{sessionId}/qa/moderation:
    parameters:
      sessionId: { $ref: '#/components/parameters/sessionId' }
    description: Admin-only channel for moderating Q&A questions with real-time alerts.
    publish:
      summary: Approve or dismiss a question.
      operationId: moderateQuestion
      message: { $ref: '#/components/messages/moderateQuestion' }
    subscribe:
      summary: Receive questions pending moderation and alerts.
      operationId: receivePendingQuestion
      message:
        oneOf:
          - $ref: '#/components/messages/newQuestion'
          - $ref: '#/components/messages/moderationAlert'

  /comm/sessions/{sessionId}/polls:
    parameters:
      sessionId: { $ref: '#/components/parameters/sessionId' }
    description: Channel for live polls and surveys with real-time results.
    publish:
      summary: Cast a vote or request the current state of polls.
      operationId: interactWithPoll
      message:
        oneOf:
          - $ref: '#/components/messages/submitPollVote'
          - $ref: '#/components/messages/requestPollsState'
    subscribe:
      summary: Receive poll status updates and real-time results.
      operationId: receivePollUpdate
      message:
        oneOf:
          - $ref: '#/components/messages/pollOpened'
          - $ref: '#/components/messages/pollResultsUpdated'
          - $ref: '#/components/messages/pollClosed'
          - $ref: '#/components/messages/currentPollsState'

  /comm/dms/{userId}:
    parameters:
      userId: { $ref: '#/components/parameters/userId' }
    description: Private channel for direct messaging between attendees with encryption.
    publish:
      summary: Send a direct message to another user.
      operationId: sendDirectMessage
      message: { $ref: '#/components/messages/sendDirectMessage' }
    subscribe:
      summary: Receive direct messages and delivery confirmations.
      operationId: receiveDirectMessage
      message:
        oneOf:
          - $ref: '#/components/messages/directMessage'
          - $ref: '#/components/messages/messageDelivered'
          - $ref: '#/components/messages/messageRead'

  # -------------------------------------------------------------------
  # Namespace: /alerts (Notifications & Alerts)
  # -------------------------------------------------------------------

  /alerts/users/{userId}:
    parameters:
      userId: { $ref: '#/components/parameters/userId' }
    description: Private channel for user-specific notifications and emergency alerts.
    subscribe:
      summary: Receive personal notifications and emergency alerts.
      operationId: receiveUserNotification
      message:
        oneOf:
          - $ref: '#/components/messages/personalNotification'
          - $ref: '#/components/messages/emergencyAlert'
          - $ref: '#/components/messages/sessionReminder'
          - $ref: '#/components/messages/scheduleChange'

  /alerts/organizations/{orgId}/admin:
    parameters:
      orgId: { $ref: '#/components/parameters/orgId' }
    description: Admin-only channel for organization-level alerts and incidents.
    subscribe:
      summary: Receive admin-level alerts and incident reports.
      operationId: receiveAdminAlert
      message:
        oneOf:
          - $ref: '#/components/messages/capacityAlert'
          - $ref: '#/components/messages/incidentReportAlert'
          - $ref: '#/components/messages/systemHealthAlert'
          - $ref: '#/components/messages/securityAlert'

  /alerts/organizations/{orgId}/incidents:
    parameters:
      orgId: { $ref: '#/components/parameters/orgId' }
    description: Channel for real-time incident reporting and management.
    publish:
      summary: Report an incident (harassment, medical, technical).
      operationId: reportIncident
      message: { $ref: '#/components/messages/reportIncident' }
    subscribe:
      summary: Receive incident status updates.
      operationId: receiveIncidentUpdate
      message: { $ref: '#/components/messages/incidentUpdate' }

  # -------------------------------------------------------------------
  # Namespace: /live (Live Dashboard & Event Experience)
  # -------------------------------------------------------------------

  /live/events/{eventId}/dashboard:
    parameters:
      eventId: { $ref: '#/components/parameters/eventId' }
    description: Admin-only channel for live event-wide analytics dashboard.
    subscribe:
      summary: Receive real-time dashboard updates and analytics.
      operationId: receiveDashboardUpdate
      message:
        oneOf:
          - $ref: '#/components/messages/attendeeCountUpdate'
          - $ref: '#/components/messages/liveCheckInFeed'
          - $ref: '#/components/messages/sessionAttendanceUpdate'
          - $ref: '#/components/messages/capacityMonitoring'
          - $ref: '#/components/messages/multitenantMetrics'

  /live/sessions/{sessionId}/reactions:
    parameters:
      sessionId: { $ref: '#/components/parameters/sessionId' }
    description: Channel for emoji reactions and audience mood tracking.
    publish:
      summary: Send an emoji reaction.
      operationId: sendReaction
      message: { $ref: '#/components/messages/sendReaction' }
    subscribe:
      summary: Receive reaction bursts and mood analytics.
      operationId: receiveReactionBurst
      message:
        oneOf:
          - $ref: '#/components/messages/reactionBurst'
          - $ref: '#/components/messages/moodAnalytics'

  /live/events/{eventId}/agenda:
    parameters:
      eventId: { $ref: '#/components/parameters/eventId' }
    description: Public channel for real-time agenda and session updates.
    subscribe:
      summary: Receive agenda updates and countdown timers.
      operationId: receiveAgendaUpdate
      message:
        oneOf:
          - $ref: '#/components/messages/agendaUpdate'
          - $ref: '#/components/messages/sessionCountdown'
          - $ref: '#/components/messages/roomChangeAlert'

  /live/sessions/{sessionId}/content:
    parameters:
      sessionId: { $ref: '#/components/parameters/sessionId' }
    description: Channel for real-time content sharing and slide synchronization.
    subscribe:
      summary: Receive live content drops and slide updates.
      operationId: receiveContentUpdate
      message:
        oneOf:
          - $ref: '#/components/messages/slideUpdate'
          - $ref: '#/components/messages/contentDrop'
          - $ref: '#/components/messages/speakerControl'

  /live/events/{eventId}/validation:
    parameters:
      eventId: { $ref: '#/components/parameters/eventId' }
    description: Channel for real-time ticket validation and access control.
    publish:
      summary: Validate ticket or access credentials.
      operationId: validateTicket
      message: { $ref: '#/components/messages/validateTicket' }
    subscribe:
      summary: Receive validation results and access updates.
      operationId: receiveValidationResult
      message:
        oneOf:
          - $ref: '#/components/messages/validationResult'
          - $ref: '#/components/messages/accessUpdated'

  # -------------------------------------------------------------------
  # Namespace: /monetization (Real-Time Monetization)
  # -------------------------------------------------------------------

  /monetization/events/{eventId}/ads:
    parameters:
      eventId: { $ref: '#/components/parameters/eventId' }
    description: Channel for real-time ad injection and sponsored content.
    subscribe:
      summary: Receive targeted ads and sponsored content.
      operationId: receiveAdContent
      message:
        oneOf:
          - $ref: '#/components/messages/adInjection'
          - $ref: '#/components/messages/sponsoredContent'

  /monetization/events/{eventId}/upsell:
    parameters:
      eventId: { $ref: '#/components/parameters/eventId' }
    description: Channel for real-time upselling opportunities and pricing updates.
    subscribe:
      summary: Receive upsell notifications and pricing changes.
      operationId: receiveUpsellOpportunity
      message:
        oneOf:
          - $ref: '#/components/messages/upsellOpportunity'
          - $ref: '#/components/messages/dynamicPricing'

  /monetization/events/{eventId}/waitlist:
    parameters:
      eventId: { $ref: '#/components/parameters/eventId' }
    description: Channel for real-time waitlist management and auto-promotion.
    subscribe:
      summary: Receive waitlist status updates and promotion notifications.
      operationId: receiveWaitlistUpdate
      message:
        oneOf:
          - $ref: '#/components/messages/waitlistPromotion'
          - $ref: '#/components/messages/waitlistStatusUpdate'

  # -------------------------------------------------------------------
  # Namespace: /ops (Security, Operations & Monitoring)
  # -------------------------------------------------------------------

  /ops/organizations/{orgId}/audit:
    parameters:
      orgId: { $ref: '#/components/parameters/orgId' }
    description: Real-time audit trail for organization activities.
    subscribe:
      summary: Receive audit log entries in real-time.
      operationId: receiveAuditLog
      message: { $ref: '#/components/messages/auditLogEntry' }

  /ops/organizations/{orgId}/security:
    parameters:
      orgId: { $ref: '#/components/parameters/orgId' }
    description: Channel for real-time security monitoring and access control.
    subscribe:
      summary: Receive security alerts and access control updates.
      operationId: receiveSecurityEvent
      message:
        oneOf:
          - $ref: '#/components/messages/securityAlert'
          - $ref: '#/components/messages/accessControlUpdate'
          - $ref: '#/components/messages/sessionConflictDetected'

  /ops/system/health:
    description: Global system health monitoring channel.
    subscribe:
      summary: Receive system health updates and failover alerts.
      operationId: receiveSystemHealth
      message:
        oneOf:
          - $ref: '#/components/messages/systemHealthAlert'
          - $ref: '#/components/messages/failoverAlert'
          - $ref: '#/components/messages/downtimeAlert'

  # -------------------------------------------------------------------
  # Namespace: /global (Global Real-Time Features)
  # -------------------------------------------------------------------

  /global/events/{eventId}/timezone:
    parameters:
      eventId: { $ref: '#/components/parameters/eventId' }
    description: Channel for multi-timezone coordination and global synchronization.
    subscribe:
      summary: Receive timezone-aware event updates and global coordination.
      operationId: receiveTimezoneUpdate
      message:
        oneOf:
          - $ref: '#/components/messages/timezoneSync'
          - $ref: '#/components/messages/globalEventSync'

  /global/translation/{sessionId}:
    parameters:
      sessionId: { $ref: '#/components/parameters/sessionId' }
    description: Channel for real-time language translation and multi-language support.
    subscribe:
      summary: Receive real-time translations and subtitle streams.
      operationId: receiveTranslation
      message:
        oneOf:
          - $ref: '#/components/messages/liveTranslation'
          - $ref: '#/components/messages/subtitleStream'

# ===================================================================
# COMPONENTS - Reusable building blocks for the API.
# ===================================================================

components:
  # --- SECURITY SCHEMES ---
  securitySchemes:
    userToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        JWT obtained from the User & Organization Management service. Must be provided
        during the initial WebSocket connection for authentication. The JWT payload must contain
        an array of permissions that are checked against the required permissions for each channel.

  # --- PERMISSIONS (NEW) ---
  x-permissions:
    description: A comprehensive list of permission scopes for Role-Based Access Control (RBAC).
    scopes:
      # Chat Permissions
      - 'chat:read'
      - 'chat:send'
      - 'chat:delete:own'
      - 'chat:delete:any' # Moderator
      - 'dm:send'
      - 'dm:read'
      # Q&A Permissions
      - 'qa:read'
      - 'qa:ask'
      - 'qa:upvote'
      - 'qa:moderate' # Moderator
      # Poll Permissions
      - 'poll:read'
      - 'poll:vote'
      - 'poll:create' # Admin/Host
      - 'poll:manage' # Admin/Host
      # Live Experience Permissions
      - 'reaction:send'
      - 'agenda:read'
      - 'content:read'
      # Admin & Dashboard Permissions
      - 'dashboard:read:live'
      - 'dashboard:read:historical'
      - 'validation:perform'
      # Organization Admin Permissions
      - 'org:admin:read_alerts'
      - 'org:incidents:report'
      - 'org:incidents:manage'
      # Operations & Security Permissions
      - 'ops:audit:read'
      - 'ops:security:read'
      - 'ops:health:read'
      # Monetization Permissions
      - 'monetization:read:ads'
      - 'monetization:manage:ads'
      - 'monetization:read:upsell'

  # --- PARAMETERS ---
  parameters:
    sessionId:
      description: The unique identifier for an event session.
      schema: { type: string, format: uuid }
    userId:
      description: The unique identifier for a user.
      schema: { type: string, format: uuid }
    orgId:
      description: The unique identifier for an organization (tenant).
      schema: { type: string, format: uuid }
    eventId:
      description: The unique identifier for an event.
      schema: { type: string, format: uuid }
    questionId:
      description: The unique identifier for a Q&A question.
      schema: { type: string, format: uuid }
    pollId:
      description: The unique identifier for a poll.
      schema: { type: string, format: uuid }
    incidentId:
      description: The unique identifier for an incident report.
      schema: { type: string, format: uuid }

  # --- MESSAGES ---
  messages:
    # System & Connection Management
    connectionAcknowledged:
      name: 'system.connection.acknowledged'
      payload: { $ref: '#/components/schemas/connectionAck' }
    heartbeat:
      name: 'system.connection.heartbeat'
      payload: { $ref: '#/components/schemas/heartbeat' }
    systemError:
      name: 'system.error'
      payload: { $ref: '#/components/schemas/errorResponse' }
    reconnectRequired:
      name: 'system.connection.reconnect'
      payload: { $ref: '#/components/schemas/reconnectInfo' }
    syncUpdate:
      name: 'system.sync.update'
      payload: { $ref: '#/components/schemas/syncData' }

    # Chat Messages
    sendChatMessage:
      name: 'chat.message.send'
      payload: { $ref: '#/components/schemas/sendMessagePayload' }
    chatMessage:
      name: 'chat.message.new'
      payload: { $ref: '#/components/schemas/chatMessage' }
    chatMessageDeleted:
      name: 'chat.message.deleted'
      payload: { $ref: '#/components/schemas/messageDeleted' }
    chatTranslated:
      name: 'chat.message.translated'
      payload: { $ref: '#/components/schemas/translatedMessage' }

    # Q&A Messages
    askQuestion:
      name: 'qa.question.ask'
      payload: { $ref: '#/components/schemas/askQuestionPayload' }
    upvoteQuestion:
      name: 'qa.question.upvote'
      payload: { $ref: '#/components/schemas/upvoteQuestionPayload' }
    moderateQuestion:
      name: 'qa.question.moderate'
      payload: { $ref: '#/components/schemas/moderateQuestionPayload' }
    requestQaState: # NEW
      name: 'qa.state.request'
      payload: { $ref: '#/components/schemas/requestStatePayload' }
    newQuestion:
      name: 'qa.question.new'
      payload: { $ref: '#/components/schemas/question' }
    questionUpdate:
      name: 'qa.question.updated'
      payload: { $ref: '#/components/schemas/question' }
    questionRemoved:
      name: 'qa.question.removed'
      payload: { $ref: '#/components/schemas/questionRemoved' }
    moderationAlert:
      name: 'qa.moderation.alert'
      payload: { $ref: '#/components/schemas/moderationAlert' }
    currentQaState: # NEW
      name: 'qa.state.current'
      payload: { $ref: '#/components/schemas/currentQaState' }

    # Poll Messages
    submitPollVote:
      name: 'poll.vote.submit'
      payload: { $ref: '#/components/schemas/submitPollVotePayload' }
    requestPollsState: # NEW
      name: 'poll.state.request'
      payload: { $ref: '#/components/schemas/requestStatePayload' }
    pollOpened:
      name: 'poll.opened'
      payload: { $ref: '#/components/schemas/poll' }
    pollResultsUpdated:
      name: 'poll.results.updated'
      payload: { $ref: '#/components/schemas/poll' }
    pollClosed:
      name: 'poll.closed'
      payload: { $ref: '#/components/schemas/pollClosed' }
    currentPollsState: # NEW
      name: 'poll.state.current'
      payload: { $ref: '#/components/schemas/currentPollsState' }

    # Direct Messages
    sendDirectMessage:
      name: 'dm.send'
      payload: { $ref: '#/components/schemas/sendDirectMessagePayload' }
    directMessage:
      name: 'dm.new'
      payload: { $ref: '#/components/schemas/directMessage' }
    messageDelivered:
      name: 'dm.delivered'
      payload: { $ref: '#/components/schemas/deliveryStatus' }
    messageRead:
      name: 'dm.read'
      payload: { $ref: '#/components/schemas/readStatus' }

    # Incident Management
    reportIncident:
      name: 'incident.report'
      payload: { $ref: '#/components/schemas/reportIncidentPayload' }
    incidentUpdate:
      name: 'incident.update'
      payload: { $ref: '#/components/schemas/incidentUpdate' }

    # Live Experience
    sendReaction:
      name: 'reaction.send'
      payload: { $ref: '#/components/schemas/sendReactionPayload' }

    # Validation
    validateTicket:
      name: 'validation.ticket.validate'
      payload: { $ref: '#/components/schemas/validateTicketPayload' }

    # ... other message definitions remain the same but could be renamed for consistency ...
    # (For brevity, only new/changed messages are fully detailed here)
    personalNotification: { name: 'alert.user.notification', payload: { $ref: '#/components/schemas/notification' } }
    emergencyAlert: { name: 'alert.user.emergency', payload: { $ref: '#/components/schemas/emergencyAlert' } }
    attendeeCountUpdate: { name: 'live.dashboard.attendee_count', payload: { $ref: '#/components/schemas/attendeeCount' } }
    auditLogEntry: { name: 'ops.audit.new', payload: { $ref: '#/components/schemas/auditLog' } }


  # --- SCHEMAS ---
  schemas:
    # Base Models
    messageMetadata:
      type: object
      required: [id, timestamp, correlationId]
      properties:
        id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        correlationId:
          type: string
          format: uuid
          description: For tracking message delivery and acknowledgment.
        schemaVersion: # REFINEMENT: Payload versioning
          type: string
          description: "The version of the payload schema, e.g., '1.0'."
          default: '1.0'
        retryCount:
          type: integer
          minimum: 0
          default: 0

    userSummary:
      type: object
      required: [id, name]
      properties:
        id: { type: string, format: uuid }
        name: { type: string, example: 'Saheed M.' }
        avatarUrl: { type: string, format: uri }
        timezone: { type: string, example: 'UTC' }
        preferredLanguage: { type: string, example: 'en' }

    # ... other base models like 'session' and 'errorResponse' remain the same

    # NEW Schemas for State Management
    requestStatePayload:
      type: object
      description: A generic payload to request the current state of a channel. Can be extended with filters.
      properties:
        idempotencyKey: # REFINEMENT: Idempotency
          type: string
          format: uuid
          description: A unique client-generated key to prevent duplicate requests.
        filters:
          type: object
          description: Optional filters for the state request.

    currentQaState:
      type: object
      required: [questions]
      properties:
        questions:
          type: array
          items:
            $ref: '#/components/schemas/question'

    currentPollsState:
      type: object
      required: [polls]
      properties:
        polls:
          type: array
          items:
            $ref: '#/components/schemas/poll'

    # REFINED Schemas with Idempotency Key
    sendMessagePayload:
      type: object
      required: [text, idempotencyKey]
      properties:
        idempotencyKey: # REFINEMENT: Idempotency
          type: string
          format: uuid
          description: A unique client-generated key to prevent duplicate message processing.
        text: { type: string, maxLength: 1000 }
        language: { type: string, default: 'en' }
        encrypted: { type: boolean, default: false }

    askQuestionPayload:
      type: object
      required: [text, idempotencyKey]
      properties:
        idempotencyKey: # REFINEMENT: Idempotency
          type: string
          format: uuid
          description: A unique client-generated key to prevent duplicate question processing.
        text: { type: string, maxLength: 500 }
        isAnonymous: { type: boolean, default: false }
        language: { type: string, default: 'en' }

    upvoteQuestionPayload:
      type: object
      required: [questionId, idempotencyKey]
      properties:
        idempotencyKey: # REFINEMENT: Idempotency
          type: string
          format: uuid
          description: A unique client-generated key to prevent duplicate upvotes.
        questionId: { type: string, format: uuid }

    moderateQuestionPayload:
      type: object
      required: [questionId, status, idempotencyKey]
      properties:
        idempotencyKey: # REFINEMENT: Idempotency
          type: string
          format: uuid
          description: A unique client-generated key to prevent duplicate moderation actions.
        questionId: { type: string, format: uuid }
        status: { type: string, enum: [approved, dismissed, flagged] }
        moderatorNote: { type: string, maxLength: 200 }

    submitPollVotePayload:
      type: object
      required: [pollId, optionId, idempotencyKey]
      properties:
        idempotencyKey: # REFINEMENT: Idempotency
          type: string
          format: uuid
          description: A unique client-generated key to prevent duplicate votes.
        pollId: { type: string, format: uuid }
        optionId: { type: string, format: uuid }
        anonymous: { type: boolean, default: false }

    sendDirectMessagePayload:
      type: object
      required: [recipientId, text, idempotencyKey]
      properties:
        idempotencyKey: # REFINEMENT: Idempotency
          type: string
          format: uuid
          description: A unique client-generated key to prevent duplicate message processing.
        recipientId: { type: string, format: uuid }
        text: { type: string, maxLength: 2000 }
        encrypted: { type: boolean, default: true }

    reportIncidentPayload:
      type: object
      required: [type, message, severity, idempotencyKey]
      properties:
        idempotencyKey: # REFINEMENT: Idempotency
          type: string
          format: uuid
          description: A unique client-generated key to prevent duplicate incident reports.
        type: { type: string, enum: [harassment, medical, technical, security, accessibility] }
        message: { type: string, maxLength: 1000 }
        severity: { type: string, enum: [low, medium, high, critical] }
        location: { type: string }
        anonymous: { type: boolean, default: false }

    sendReactionPayload:
      type: object
      required: [emoji, idempotencyKey]
      properties:
        idempotencyKey: # REFINEMENT: Idempotency
          type: string
          format: uuid
          description: A unique client-generated key to prevent duplicate reactions.
        emoji: { type: string, example: '👍' }
        intensity: { type: integer, minimum: 1, maximum: 5, default: 1 }

    validateTicketPayload:
      type: object
      required: [ticketCode, validationType, idempotencyKey]
      properties:
        idempotencyKey: # REFINEMENT: Idempotency
          type: string
          format: uuid
          description: A unique client-generated key to prevent duplicate validation attempts.
        ticketCode: { type: string }
        validationType: { type: string, enum: [QR_CODE, NFC, MANUAL, MOBILE] }
        location: { type: string }
        deviceId: { type: string }

    # All other schemas remain as they were...
    # (The schemas for `chatMessage`, `question`, `poll` etc. are unchanged)
    # --- The rest of the `components/schemas` section remains the same ---
    # ...

# --- OPERATIONAL CONSIDERATIONS ---
x-rate-limits:
  default:
    messages: 100
    reactions: 300
    questions: 20
    polls: 10
  vip:
    messages: 500
    reactions: 1000
    questions: 50
    polls: 25

x-message-retention:
  chat: '7 days'
  directMessages: '30 days'
  auditLogs: '1 year'
  analytics: '90 days'

x-scaling:
  maxConnectionsPerServer: 50000
  redisClusterNodes: 3
  loadBalancingStrategy: 'round-robin'
  autoScaling: true

x-monitoring:
  healthCheckInterval: 30
  metricsCollection: true
  alertingThresholds:
    errorRate: 0.01
    responseTime: 100
    connectionFailures: 0.05