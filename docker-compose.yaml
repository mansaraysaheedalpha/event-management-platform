# event_management_platform/docker-compose.yml
# Top-level network for all services to communicate securely
networks:
  platform-network:
    driver: bridge

# Top-level volume definitions for clarity
volumes: 
  postgres-event-lifecycle-data:
  postgres-user-org-data:
  postgres-real-time-data:
  postgres-oracle-ai-data:
  redis-data:

services:
  # --- INFRASTRUCTURE SERVICES ---
  postgres-event-lifecycle:
    image: postgres:15
    container_name: postgres-event-lifecycle
    restart: always
    environment:
      POSTGRES_USER: ${EVENT_DB_USER}
      POSTGRES_PASSWORD: ${EVENT_DB_PASSWORD}
      POSTGRES_DB: ${EVENT_DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres-event-lifecycle-data:/var/lib/postgresql/data
    networks:
      - platform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${EVENT_DB_USER} -d ${EVENT_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-user-org:
    image: postgres:15
    container_name: postgres-user-org
    restart: always
    environment:
      POSTGRES_USER: ${USER_ORG_DB_USER}
      POSTGRES_PASSWORD: ${USER_ORG_DB_PASSWORD}
      POSTGRES_DB: ${USER_ORG_DB_NAME}
    ports:
      - "5434:5432"
    volumes:
      - postgres-user-org-data:/var/lib/postgresql/data
    networks:
      - platform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_ORG_DB_USER} -d ${USER_ORG_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-real-time:
    image: postgres:15
    container_name: postgres-real-time
    restart: always
    environment:
      POSTGRES_USER: ${REAL_TIME_DB_USER}
      POSTGRES_PASSWORD: ${REAL_TIME_DB_PASSWORD}
      POSTGRES_DB: ${REAL_TIME_DB_NAME}
    ports:
      - "5433:5432"
    volumes:
      - postgres-real-time-data:/var/lib/postgresql/data
    networks:
      - platform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${REAL_TIME_DB_USER} -d ${REAL_TIME_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-oracle-ai:
    image: postgres:15
    container_name: postgres-oracle-ai
    restart: always
    environment:
      POSTGRES_USER: ${ORACLE_DB_USER}
      POSTGRES_PASSWORD: ${ORACLE_DB_PASSWORD}
      POSTGRES_DB: ${ORACLE_DB_NAME}
    ports:
      - "5436:5432" # Use a new host port like 5436
    volumes:
      - postgres-oracle-ai-data:/var/lib/postgresql/data
    networks:
      - platform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${ORACLE_DB_USER} -d ${ORACLE_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  db-test:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: youruser
      POSTGRES_PASSWORD: yourpassword
      POSTGRES_DB: yourtestdb
    ports:
      - "5435:5432" # Host port 5435
    volumes:
      - ./postgres-test-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U youruser -d yourtestdb"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - platform-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - platform-network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - platform-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      
  # --- APPLICATION SERVICES ---
  apollo-gateway:
    build:
      context: ./apollo-gateway
    container_name: apollo-gateway
    restart: always
    ports:
      - "4000:4000"
    networks:
      - platform-network
    depends_on:
      - user-and-org-service
      - event-lifecycle-service
    env_file:
      - ./.env

  user-and-org-service:
    build:
      context: ./user-and-org-service
      dockerfile: dockerfile
    container_name: user-and-org-service
    restart: always
    ports:
      - "3001:3001"
    networks:
      - platform-network
    depends_on:
      postgres-user-org:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${USER_ORG_DB_USER}:${USER_ORG_DB_PASSWORD}@postgres-user-org:5432/${USER_ORG_DB_NAME}
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - ./.env

  event-lifecycle-service:
    build:
      context: ./event-lifecycle-service
    container_name: event-lifecycle-service
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./event-lifecycle-service:/app
    networks:
      - platform-network
    depends_on:
      postgres-event-lifecycle:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./.env

  event-celery-worker:
    build:
      context: ./event-lifecycle-service
    container_name: event-celery-worker
    restart: always
    command: celery -A app.worker.celery_app worker --loglevel=info
    volumes:
      - ./event-lifecycle-service:/app
    networks:
      - platform-network
    depends_on:
      - event-lifecycle-service
      - redis
    env_file:
      - ./.env

  real-time-service: 
    build:
      context: ./real-time-service
    container_name: real-time-service
    restart: always
    ports:
      - "3002:3002"
    networks:
      - platform-network
    depends_on:
      postgres-real-time:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      event-lifecycle-service:
        condition: service_started
      user-and-org-service:
        condition: service_started
    env_file:
      - ./.env

  oracle-api:
    build:
      context: ./oracle-ai-service
    container_name: oracle-api
    restart: always
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001
    ports:
      - "8001:8001"
    volumes:
      - ./oracle-ai-service:/app
    networks:
      - platform-network
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      postgres-oracle-ai:
        condition: service_healthy
    env_file:
      - ./.env

  oracle-consumer:
    build:
      context: ./oracle-ai-service
    container_name: oracle-consumer
    restart: always
    command: python app/messaging/run_consumers.py # Assuming this is the script to start consumers
    volumes:
      - ./oracle-ai-service:/app
    networks:
      - platform-network
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      postgres-oracle-ai:
        condition: service_healthy
    env_file:
      - ./.env

