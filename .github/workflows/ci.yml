name: Real-Time Service CI

on:
  push:
    branches: [ "main" ]
    paths:
      - 'real-time-service/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'real-time-service/**'
      - '.github/workflows/ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: youruser
          POSTGRES_PASSWORD: yourpassword
          POSTGRES_DB: yourtestdb
        ports:
          - 5435:5432
        options: >-
          --health-cmd "pg_isready -U youruser -d yourtestdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        # **FIX**: Run pnpm from the root where the lockfile is
        run: pnpm install --frozen-lockfile

      - name: Run Unit & Integration Tests
        # **FIX**: Specify the working directory for this command
        working-directory: ./real-time-service
        run: npm test

      - name: Apply Prisma Migrations to Test DB
        working-directory: ./real-time-service
        env:
          TEST_DATABASE_URL: postgresql://youruser:yourpassword@localhost:5435/yourtestdb
        run: DATABASE_URL=${{ env.TEST_DATABASE_URL }} npx prisma migrate deploy

      - name: Run End-to-End Tests
        working-directory: ./real-time-service
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: postgresql://youruser:yourpassword@localhost:5435/yourtestdb
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: npm run test:e2e